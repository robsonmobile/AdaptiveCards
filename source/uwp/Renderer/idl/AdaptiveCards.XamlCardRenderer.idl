#include <sdkddkver.h>

import "inspectable.idl";
import "Windows.Foundation.idl";
import "Windows.UI.Xaml.idl";

namespace AdaptiveCards
{
    namespace XamlCardRenderer
    {
        runtimeclass XamlCardRenderer;

        runtimeclass AdaptiveTextBlock;
        runtimeclass AdaptiveCard;
        runtimeclass AdaptiveImage;
        runtimeclass AdaptiveImageSet;
        runtimeclass AdaptiveContainer;
        runtimeclass AdaptiveColumn;
        runtimeclass AdaptiveColumnSet;
        runtimeclass AdaptiveFact;
        runtimeclass AdaptiveFactSet;
        runtimeclass AdaptiveChoiceInput;
        runtimeclass AdaptiveChoiceSetInput;
        runtimeclass AdaptiveDateInput;
        runtimeclass AdaptiveNumberInput;
        runtimeclass AdaptiveTextInput;
        runtimeclass AdaptiveTimeInput;
        runtimeclass AdaptiveToggleInput;
        runtimeclass AdaptiveSeparator;

        runtimeclass AdaptiveSpacingDefinition;
        runtimeclass AdaptiveFontSizesConfig;
        runtimeclass AdaptiveColorsConfig;
        runtimeclass AdaptiveColorConfig;
        runtimeclass AdaptiveTextConfig;
        runtimeclass AdaptiveImageSizesConfig;
        runtimeclass AdaptiveImageSetConfig;
        runtimeclass AdaptiveContainerConfig;
        runtimeclass AdaptiveContainerStyleConfig;
        runtimeclass AdaptiveImageConfig;
        runtimeclass AdaptiveCardConfig;
        runtimeclass AdaptiveFactSetConfig;
        runtimeclass AdaptiveShowCardActionConfig;
        runtimeclass AdaptiveActionsConfig;
        runtimeclass AdaptiveHostConfig;
        runtimeclass AdaptiveSpacingConfig;
        runtimeclass AdaptiveSeparatorColorConfig;
        runtimeclass AdaptiveSeparatorThicknessConfig;

        runtimeclass AdaptiveActionEventArgs;

        interface IAdaptiveCardElement;
        interface IAdaptiveActionElement;
        interface IAdaptiveTextBlock;
        interface IAdaptiveCard;
        interface IAdaptiveImage;
        interface IAdaptiveImageSet;
        interface IAdaptiveContainer;
        interface IAdaptiveColumn;
        interface IAdaptiveColumnSet;
        interface IAdaptiveFact;
        interface IAdaptiveFactSet;
        interface IAdaptiveChoiceInput;
        interface IAdaptiveChoiceSetInput;
        interface IAdaptiveDateInput;
        interface IAdaptiveTextInput;
        interface IAdaptiveNumberInput;
        interface IAdaptiveTimeInput;
        interface IAdaptiveToggleInput;
        interface IAdaptiveSeparator;

        interface IAdaptiveSpacingDefinition;
        interface IAdaptiveFontSizesConfig;
        interface IAdaptiveColorConfig;
        interface IAdaptiveColorsConfig;
        interface IAdaptiveTextConfig;
        interface IAdaptiveImageSizesConfig;
        interface IAdaptiveImageSetConfig;
        interface IAdaptiveContainerStyleConfig;
        interface IAdaptiveContainerConfig;
        interface IAdaptiveImageConfig;
        interface IAdaptiveCardConfig;
        interface IAdaptiveFactSetConfig;
        interface IAdaptiveShowCardActionConfig;
        interface IAdaptiveActionsConfig;
        interface IAdaptiveHostConfig;
        interface IAdaptiveSpacingConfig;
        interface IAdaptiveSeparatorColorConfig;
        interface IAdaptiveSeparatorThicknessConfig;

        interface IAdaptiveActionEventArgs;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum TextSize
        {
            Small = 0,
            Normal,
            Medium,
            Large,
            ExtraLarge
        } TextSize;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum TextWeight
        {
            Lighter = 0,
            Normal,
            Bolder
        } TextWeight;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum TextColor
        {
            Default = 0,
            Dark,
            Light,
            Accent,
            Good,
            Warning,
            Attention
        } TextColor;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum HAlignment
        {
            Left = 0,
            Center,
            Right
        } HAlignment;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum ElementType
        {
            Unsupported = 0,
            AdaptiveCard,
            TextBlock,
            Image,
            Container,
            Column,
            ColumnSet,
            FactSet,
            Fact,
            ImageSet,
            ChoiceInput,
            ChoiceSetInput,
            DateInput,
            NumberInput,
            TextInput,
            TimeInput,
            ToggleInput,
        } ElementType;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum ActionType
        {
            Unsupported = 0, 
            ShowCard,
            Submit,
            Http,
            OpenUrl
        } ActionType;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum ImageStyle {
            Normal = 0,
            Person
        } ImageStyle;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum ImageSize {
            Default = 0,
            Auto,
            Stretch,
            Small,
            Medium,
            Large
        } ImageSize;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum SeparatorColor {
            Default = 0,
            Accent,
        } SeparatorColor;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum SeparatorThickness {
            Default = 0,
            Thick,
        } SeparatorThickness;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum Spacing {
            Default = 0,
            None,
            Small,
            Medium,
            Large,
            ExtraLarge,
            Padding
        } Spacing;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum ActionsOrientation {
            Vertical = 0,
            Horizontal
        } ActionsOrientation;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum ActionAlignment {
            Left = 0,
            Center,
            Right,
            Stretch,
        } ActionAlignment;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum ActionMode {
            InlineEdgeToEdge = 0,
            Inline,
            Popup
        } ActionMode;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum ChoiceSetStyle {
            Compact = 0,
            Expanded
        } ChoiceSetStyle;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum TextInputStyle {
            Text = 0,
            Tel,
            Url,
            Email,
        } TextInputStyle;

        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum ContainerStyle {
            Normal = 0,
            Emphasis
        } ContainerStyle;

        declare
        {
            interface Windows.Foundation.Collections.IVector<IAdaptiveCardElement*>;
            interface Windows.Foundation.Collections.IVector<IAdaptiveActionElement*>;
            interface Windows.Foundation.Collections.IVector<IAdaptiveColumn*>;
            interface Windows.Foundation.Collections.IVector<IAdaptiveFact*>;
            interface Windows.Foundation.Collections.IVector<IAdaptiveChoiceInput*>;
            interface Windows.Foundation.Collections.IObservableVector<IAdaptiveCardElement*>;
            interface Windows.Foundation.Collections.IObservableVector<IAdaptiveColumn*>;
            interface Windows.Foundation.Collections.IObservableVector<IAdaptiveColumn*>;
            interface Windows.Foundation.IAsyncOperation<Windows.UI.Xaml.UIElement*>;
            interface Windows.Foundation.IReference<Windows.UI.Text.FontWeight>;
        }

        [
            uuid(74D69C2F-7F1C-47FD-A319-F4B4E7F72EE9),
            version(NTDDI_WIN10_RS1),
        ]
        interface IAdaptiveCardElement : IInspectable
        {
            [propget] HRESULT ElementType([out, retval] ElementType* value);

            [propget] HRESULT Speak([out, retval] HSTRING* value);
            [propput] HRESULT Speak([in] HSTRING value);

            [propget] HRESULT Spacing([out, retval] Spacing* value);
            [propput] HRESULT Spacing([in] Spacing value);

            [propget] HRESULT Separator([out, retval] AdaptiveSeparator** value);
            [propput] HRESULT Separator([in] AdaptiveSeparator* value);
        };

        [
            uuid(a2a0727a-e4aa-423d-b5b0-4b85f7a534c4),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveSeparator)
        ]
        interface IAdaptiveSeparator : IInspectable
        {
            [propget] HRESULT Color([out, retval] SeparatorColor* value);
            [propput] HRESULT Color([in] SeparatorColor value);

            [propget] HRESULT Thickness([out, retval] SeparatorThickness* value);
            [propput] HRESULT Thickness([in] SeparatorThickness value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveSeparator
        {
            [default] interface IAdaptiveSeparator;
        };

        [
            uuid(f3b844da-2d6a-4003-8a57-4e5541fcd078),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveTextBlock)
        ]
        interface IAdaptiveTextBlock : IInspectable
        {
            [propget] HRESULT Size([out, retval] TextSize* value);
            [propput] HRESULT Size([in] TextSize value);

            [propget] HRESULT Weight([out, retval] TextWeight* value);
            [propput] HRESULT Weight([in] TextWeight value);

            [propget] HRESULT Color([out, retval] TextColor* value);
            [propput] HRESULT Color([in] TextColor value);

            [propget] HRESULT Text([out, retval] HSTRING* value);
            [propput] HRESULT Text([in] HSTRING value);

            [propget] HRESULT IsSubtle([out, retval] boolean* value);
            [propput] HRESULT IsSubtle([in] boolean value);

            [propget] HRESULT Wrap([out, retval] boolean* value);
            [propput] HRESULT Wrap([in] boolean value);

            [propget] HRESULT HorizontalAlignment([out, retval] HAlignment* value);
            [propput] HRESULT HorizontalAlignment([in] HAlignment value);

            [propget] HRESULT MaxLines([out, retval] UINT32 *value);
            [propput] HRESULT MaxLines([in] UINT32 value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveTextBlock
        {
            [default] interface IAdaptiveTextBlock;
            interface IAdaptiveCardElement;
        };

        [
            uuid(9F68A612-9DCB-4710-8121-A116BD33B69B),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveCard),
        ]
        interface IAdaptiveCard : IInspectable
        {
            [propget] HRESULT Body([out, retval] Windows.Foundation.Collections.IVector<IAdaptiveCardElement*>** value);

            [propget] HRESULT Actions([out, retval] Windows.Foundation.Collections.IVector<IAdaptiveActionElement*>** value);

            [propget] HRESULT ElementType([out, retval] ElementType* value);

            [propget] HRESULT Version([out, retval] HSTRING* value);
            [propput] HRESULT Version([in] HSTRING value);

            [propget] HRESULT MinVersion([out, retval] HSTRING* value);
            [propput] HRESULT MinVersion([in] HSTRING value);

            [propget] HRESULT FallbackText([out, retval] HSTRING* value);
            [propput] HRESULT FallbackText([in] HSTRING value);

            [propget] HRESULT BackgroundImageUrl([out, retval] Windows.Foundation.Uri** value);
            [propput] HRESULT BackgroundImageUrl([in] Windows.Foundation.Uri* value);

            HRESULT ToJsonString([out, retval] HSTRING* value);
        };

        [
            uuid(C312AD20-DFE3-4418-819F-E3CB7A0CD2FE),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveCard),
        ]
        interface IAdaptiveCardStatics : IInspectable
        {
            HRESULT CreateCardFromJson([in] HSTRING adaptiveJson, [out, retval] AdaptiveCard** card);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1),
            static(IAdaptiveCardStatics, NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveCard
        {
            [default] interface IAdaptiveCard;
        }

        [
            uuid(16452a2e-1152-47f3-90bd-6e4148b09669),
            version(NTDDI_WIN10_RS1),
        ]
        interface IAdaptiveImage : IInspectable
        {
            [propget] HRESULT Url([out, retval] Windows.Foundation.Uri** value);
            [propput] HRESULT Url([in] Windows.Foundation.Uri* value);

            [propget] HRESULT Style([out, retval] ImageStyle* value);
            [propput] HRESULT Style([in] ImageStyle value);

            [propget] HRESULT Size([out, retval] ImageSize* value);
            [propput] HRESULT Size([in] ImageSize value);

            [propget] HRESULT HorizontalAlignment([out, retval] HAlignment* value);
            [propput] HRESULT HorizontalAlignment([in] HAlignment value);

            [propget] HRESULT AltText([out, retval] HSTRING* value);
            [propput] HRESULT AltText([in] HSTRING value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveImage
        {
            [default] interface IAdaptiveImage;
            interface IAdaptiveCardElement;
        };

        [
            uuid(f618bd35-8fe3-46bd-8988-cdf5607314d1),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveImageSet)
        ]
        interface IAdaptiveImageSet : IInspectable
        {
            [propget] HRESULT Images([out, retval] Windows.Foundation.Collections.IVector<IAdaptiveImage*>** value);

            [propget] HRESULT ImageSize([out, retval] ImageSize* value);
            [propput] HRESULT ImageSize([in] ImageSize value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveImageSet
        {
            [default] interface IAdaptiveImageSet;
            interface IAdaptiveCardElement;
        };

        [
            uuid(9b10f5ef-26e8-4d65-ba76-b986b5e90586),
            version(NTDDI_WIN10_RS1),
        ]
        interface IAdaptiveInputElement : IInspectable
        {
            [propget] HRESULT Id([out, retval] HSTRING* value);
            [propput] HRESULT Id([in] HSTRING value);

            [propget] HRESULT IsRequired([out, retval] boolean* value);
            [propput] HRESULT IsRequired([in] boolean value);
        };

        [
            uuid(99797dfe-d39c-43a4-9f2b-d457cc358e1e),
            version(NTDDI_WIN10_RS1)
        ]
        interface IAdaptiveChoiceInput : IInspectable
        {
            [propget] HRESULT ElementType([out, retval] ElementType* value);

            [propget] HRESULT Speak([out, retval] HSTRING* value);
            [propput] HRESULT Speak([in] HSTRING value);

            [propget] HRESULT Title([out, retval] HSTRING* value);
            [propput] HRESULT Title([in] HSTRING value);

            [propget] HRESULT Value([out, retval] HSTRING* value);
            [propput] HRESULT Value([in] HSTRING value);
            
            [propget] HRESULT IsSelected([out, retval] boolean* value);
            [propput] HRESULT IsSelected([in] boolean value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveChoiceInput
        {
            [default] interface IAdaptiveChoiceInput;
        };

        [
            uuid(ce0735ef-f983-4a5e-bdad-f5eb7f962faa),
            version(NTDDI_WIN10_RS1)
        ]
        interface IAdaptiveChoiceSetInput : IInspectable
        {
            [propget] HRESULT IsMultiSelect([out, retval] boolean* value);
            [propput] HRESULT IsMultiSelect([in] boolean value);

            [propget] HRESULT ChoiceSetStyle([out, retval] ChoiceSetStyle* value);
            [propput] HRESULT ChoiceSetStyle([in] ChoiceSetStyle value);

            [propget] HRESULT Choices([out, retval] Windows.Foundation.Collections.IVector<IAdaptiveChoiceInput*>** value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveChoiceSetInput
        {
            [default] interface IAdaptiveChoiceSetInput;
            interface IAdaptiveInputElement;
            interface IAdaptiveCardElement;
        };

        [
            uuid(359e2cc5-9b8d-40bf-bbb2-2d3494d30991),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveDateInput)
        ]
        interface IAdaptiveDateInput : IInspectable
        {
            [propget] HRESULT Max([out, retval] HSTRING* value);
            [propput] HRESULT Max([in] HSTRING value);

            [propget] HRESULT Min([out, retval] HSTRING* value);
            [propput] HRESULT Min([in] HSTRING value);

            [propget] HRESULT Placeholder([out, retval] HSTRING* value);
            [propput] HRESULT Placeholder([in] HSTRING value);

            [propget] HRESULT Value([out, retval] HSTRING* value);
            [propput] HRESULT Value([in] HSTRING value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveDateInput
        {
            [default] interface IAdaptiveDateInput;
            interface IAdaptiveInputElement;
            interface IAdaptiveCardElement;
        };

        [
            uuid(3bd0868c-5fbd-4341-91ff-4b07eb2bd54c),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveNumberInput)
        ]
        interface IAdaptiveNumberInput : IInspectable
        {
            [propget] HRESULT Max([out, retval] INT32 *value);
            [propput] HRESULT Max([in] INT32 value);

            [propget] HRESULT Min([out, retval] INT32 *value);
            [propput] HRESULT Min([in] INT32 value);

            [propget] HRESULT Placeholder([out, retval] HSTRING* value);
            [propput] HRESULT Placeholder([in] HSTRING value);

            [propget] HRESULT Value([out, retval] INT32* value);
            [propput] HRESULT Value([in] INT32 value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveNumberInput
        {
            [default] interface IAdaptiveNumberInput;
            interface IAdaptiveInputElement;
            interface IAdaptiveCardElement;
        };

        [
            uuid(ab30772b-172d-4595-bcd2-01001df19d1e),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveTextInput)
        ]
        interface IAdaptiveTextInput : IInspectable
        {
            [propget] HRESULT IsMultiline([out, retval] boolean* value);
            [propput] HRESULT IsMultiline([in] boolean value);

            [propget] HRESULT MaxLength([out, retval] UINT32 *value);
            [propput] HRESULT MaxLength([in] UINT32 value);

            [propget] HRESULT Placeholder([out, retval] HSTRING* value);
            [propput] HRESULT Placeholder([in] HSTRING value);

            [propget] HRESULT Value([out, retval] HSTRING* value);
            [propput] HRESULT Value([in] HSTRING value);

            [propget] HRESULT TextInputStyle([out, retval] TextInputStyle* value);
            [propput] HRESULT TextInputStyle([in] TextInputStyle value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveTextInput
        {
            [default] interface IAdaptiveTextInput;
            interface IAdaptiveInputElement;
            interface IAdaptiveCardElement;
        };

        [
            uuid(1ee90aff-93e8-4292-ac49-39d4c3289cd9),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveTimeInput)
        ]
        interface IAdaptiveTimeInput : IInspectable
        {
            [propget] HRESULT Max([out, retval] HSTRING* value);
            [propput] HRESULT Max([in] HSTRING value);

            [propget] HRESULT Min([out, retval] HSTRING* value);
            [propput] HRESULT Min([in] HSTRING value);

            [propget] HRESULT Placeholder([out, retval] HSTRING* value);
            [propput] HRESULT Placeholder([in] HSTRING value);

            [propget] HRESULT Value([out, retval] HSTRING* value);
            [propput] HRESULT Value([in] HSTRING value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveTimeInput
        {
            [default] interface IAdaptiveTimeInput;
            interface IAdaptiveInputElement;
            interface IAdaptiveCardElement;
        };

        [
            uuid(e8af72a5-597c-4a19-b9c2-1a597db1c79a),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveToggleInput)
        ]
        interface IAdaptiveToggleInput : IInspectable
        {
            [propget] HRESULT Title([out, retval] HSTRING* value);
            [propput] HRESULT Title([in] HSTRING value);

            [propget] HRESULT Value([out, retval] HSTRING* value);
            [propput] HRESULT Value([in] HSTRING value);

            [propget] HRESULT ValueOff([out, retval] HSTRING* value);
            [propput] HRESULT ValueOff([in] HSTRING value);

            [propget] HRESULT ValueOn([out, retval] HSTRING* value);
            [propput] HRESULT ValueOn([in] HSTRING value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveToggleInput
        {
            [default] interface IAdaptiveToggleInput;
            interface IAdaptiveInputElement;
            interface IAdaptiveCardElement;
        };

        [
            uuid(ba90da3f-556c-4e3a-9d01-11f2ce78dcd7),
            version(NTDDI_WIN10_RS1)
        ]
        interface IAdaptiveContainer : IInspectable
        {
            [propget] HRESULT Style([out, retval] ContainerStyle* value);
            [propput] HRESULT Style([in] ContainerStyle value);

            [propget] HRESULT Items([out, retval] Windows.Foundation.Collections.IVector<IAdaptiveCardElement*>** value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveContainer
        {
            [default] interface IAdaptiveContainer;
            interface IAdaptiveCardElement;
        };

        [
            uuid(91e03800-d239-43bc-b5fb-2ccfe0cc7fcb),
            version(NTDDI_WIN10_RS1)
        ]
        interface IAdaptiveColumn : IInspectable
        {
            [propget] HRESULT Size([out, retval] HSTRING* value);
            [propput] HRESULT Size([in] HSTRING value);

            [propget] HRESULT Items([out, retval] Windows.Foundation.Collections.IVector<IAdaptiveCardElement*>** value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveColumn
        {
            [default] interface IAdaptiveColumn;
            interface IAdaptiveCardElement;
        };

        [
            uuid(4e3e1cd1-906b-4718-96ea-0a6e16bf0199),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveColumnSet)
        ]
        interface IAdaptiveColumnSet : IInspectable
        {
            [propget] HRESULT Columns([out, retval] Windows.Foundation.Collections.IVector<IAdaptiveColumn*>** value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveColumnSet
        {
            [default] interface IAdaptiveColumnSet;
            interface IAdaptiveCardElement;
        };


        [
            uuid(5c19aa31-03aa-4148-a529-75b855ba045b),
            version(NTDDI_WIN10_RS1)
        ]
        interface IAdaptiveFact : IInspectable
        {
            [propget] HRESULT ElementType([out, retval] ElementType* value);

            [propget] HRESULT Speak([out, retval] HSTRING* value);
            [propput] HRESULT Speak([in] HSTRING value);

            [propget] HRESULT Title([out, retval] HSTRING* value);
            [propput] HRESULT Title([in] HSTRING value);

            [propget] HRESULT Value([out, retval] HSTRING* value);
            [propput] HRESULT Value([in] HSTRING value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveFact
        {
            [default] interface IAdaptiveFact;
        };

        [
            uuid(05457b99-8090-4937-a637-b469f8edc74f),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveFactSet)
        ]
        interface IAdaptiveFactSet : IInspectable
        {
            [propget] HRESULT Facts([out, retval] Windows.Foundation.Collections.IVector<IAdaptiveFact*>** value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveFactSet
        {
            [default] interface IAdaptiveFactSet;
            interface IAdaptiveCardElement;
        };

        [flags]
        [version(NTDDI_WIN10_RS1)]
        typedef [v1_enum] enum RenderOptions
        {
            None = 0x0,
            SupportsActionBar = 0x1,
            SupportsInlineActions = 0x2,
        }RenderOptions;

        [
            uuid(DB7C7BB8-C313-440A-A421-B52620107F8B),
            version(NTDDI_WIN10_RS1),
            exclusiveto(XamlCardRenderer),
        ]
        interface IXamlCardRenderer : IInspectable
        {
            HRESULT SetRenderOptions([in] RenderOptions options);
            HRESULT SetOverrideStyles([in] Windows.UI.Xaml.ResourceDictionary* overrideDictionary);
            HRESULT SetHostConfig([in] AdaptiveHostConfig* hostConfig);

            HRESULT RenderCardAsXaml([in] AdaptiveCard* adaptiveCard, [out, retval] Windows.UI.Xaml.UIElement** result);
            HRESULT RenderCardAsXamlAsync([in] AdaptiveCard* adaptiveCard, [out, retval] Windows.Foundation.IAsyncOperation<Windows.UI.Xaml.UIElement*>** result);

            HRESULT RenderAdaptiveJsonAsXaml([in] HSTRING adaptiveJson, [out, retval] Windows.UI.Xaml.UIElement** result);
            HRESULT RenderAdaptiveJsonAsXamlAsync([in] HSTRING adaptiveJson, [out, retval] Windows.Foundation.IAsyncOperation<Windows.UI.Xaml.UIElement*>** result);

            [eventadd] HRESULT Action([in] Windows.Foundation.TypedEventHandler<XamlCardRenderer*, AdaptiveActionEventArgs*>* pHandler, [out][retval] EventRegistrationToken* pToken);
            [eventremove] HRESULT Action([in] EventRegistrationToken token);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1),
        ]
        runtimeclass XamlCardRenderer
        {
            [default] interface IXamlCardRenderer;
        };

        [
            uuid(6853cff8-60ee-4270-9cd2-23b25cd8703f),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveActionEventArgs)
        ]
        interface IAdaptiveActionEventArgs : IInspectable
        {
            [propget] HRESULT Action([out, retval] IAdaptiveActionElement** action);
            [propget] HRESULT Inputs([out, retval] HSTRING* value);
        }

        [
            version(NTDDI_WIN10_RS1),
        ]
        runtimeclass AdaptiveActionEventArgs
        {
            [default] interface IAdaptiveActionEventArgs;
        };

        [
            uuid(c49685af-df56-49ea-8fce-ce302788edc5),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveSpacingDefinition)
        ]
        interface IAdaptiveSpacingDefinition : IInspectable
        {
            [propget] HRESULT Left([out, retval] UINT32 *value);
            [propput] HRESULT Left([in] UINT32 value);

            [propget] HRESULT Right([out, retval] UINT32 *value);
            [propput] HRESULT Right([in] UINT32 value);

            [propget] HRESULT Bottom([out, retval] UINT32 *value);
            [propput] HRESULT Bottom([in] UINT32 value);

            [propget] HRESULT Top([out, retval] UINT32 *value);
            [propput] HRESULT Top([in] UINT32 value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveSpacingDefinition
        {
            [default] interface IAdaptiveSpacingDefinition;
        };

        [
            uuid(ebca0eab-b08b-4087-9c42-4667ec6ab0e0),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveFontSizesConfig)
        ]
        interface IAdaptiveFontSizesConfig : IInspectable
        {
            [propget] HRESULT Small([out, retval] UINT32 *value);
            [propput] HRESULT Small([in] UINT32 value);

            [propget] HRESULT Normal([out, retval] UINT32 *value);
            [propput] HRESULT Normal([in] UINT32 value);

            [propget] HRESULT Medium([out, retval] UINT32 *value);
            [propput] HRESULT Medium([in] UINT32 value);

            [propget] HRESULT Large([out, retval] UINT32 *value);
            [propput] HRESULT Large([in] UINT32 value);

            [propget] HRESULT ExtraLarge([out, retval] UINT32 *value);
            [propput] HRESULT ExtraLarge([in] UINT32 value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveFontSizesConfig
        {
            [default] interface IAdaptiveFontSizesConfig;
        };

        [
            uuid(421149d7-65e9-4ec9-b70b-802ba7d6cf98),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveColorConfig)
        ]
        interface IAdaptiveColorConfig : IInspectable
        {
            [propget] HRESULT Normal([out][retval] Windows.UI.Color* value);
            [propput] HRESULT Normal([in] Windows.UI.Color value);

            [propget] HRESULT Subtle([out][retval] Windows.UI.Color* value);
            [propput] HRESULT Subtle([in] Windows.UI.Color value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveColorConfig
        {
            [default] interface IAdaptiveColorConfig;
        };

        [
            uuid(1ade7d94-f0ae-4301-a9e2-b1f9c065916f),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveColorsConfig)
        ]
        interface IAdaptiveColorsConfig : IInspectable
        {
            [propget] HRESULT Default([out][retval] AdaptiveColorConfig** value);
            [propput] HRESULT Default([in] AdaptiveColorConfig* value);

            [propget] HRESULT Accent([out][retval] AdaptiveColorConfig** value);
            [propput] HRESULT Accent([in] AdaptiveColorConfig* value);

            [propget] HRESULT Dark([out][retval] AdaptiveColorConfig** value);
            [propput] HRESULT Dark([in] AdaptiveColorConfig* value);

            [propget] HRESULT Light([out][retval] AdaptiveColorConfig** value);
            [propput] HRESULT Light([in] AdaptiveColorConfig* value);

            [propget] HRESULT Good([out][retval] AdaptiveColorConfig** value);
            [propput] HRESULT Good([in] AdaptiveColorConfig* value);

            [propget] HRESULT Warning([out][retval] AdaptiveColorConfig** value);
            [propput] HRESULT Warning([in] AdaptiveColorConfig* value);

            [propget] HRESULT Attention([out][retval] AdaptiveColorConfig** value);
            [propput] HRESULT Attention([in] AdaptiveColorConfig* value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveColorsConfig
        {
            [default] interface IAdaptiveColorsConfig;
        };

        [
            uuid(d730ba59-1f48-4dc6-8375-17f364f6086a),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveTextConfig)
        ]
        interface IAdaptiveTextConfig : IInspectable
        {
            [propget] HRESULT Weight([out, retval] TextWeight* value);
            [propput] HRESULT Weight([in] TextWeight value);

            [propget] HRESULT Size([out, retval] TextSize* value);
            [propput] HRESULT Size([in] TextSize value);

            [propget] HRESULT Color([out, retval] TextColor* value);
            [propput] HRESULT Color([in] TextColor value);
 
            [propget] HRESULT IsSubtle([out, retval] boolean* value);
            [propput] HRESULT IsSubtle([in] boolean value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveTextConfig
        {
            [default] interface IAdaptiveTextConfig;
        };

        [
            uuid(0e21ac82-4838-43cb-b7ef-7b023011061b),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveSpacingConfig)
        ]
        interface IAdaptiveSpacingConfig : IInspectable
        {
            [propget] HRESULT Small([out, retval] UINT32 *value);
            [propput] HRESULT Small([in] UINT32 value);

            [propget] HRESULT Default([out, retval] UINT32 *value);
            [propput] HRESULT Default([in] UINT32 value);

            [propget] HRESULT Medium([out, retval] UINT32 *value);
            [propput] HRESULT Medium([in] UINT32 value);

            [propget] HRESULT Large([out, retval] UINT32 *value);
            [propput] HRESULT Large([in] UINT32 value);

            [propget] HRESULT ExtraLarge([out, retval] UINT32 *value);
            [propput] HRESULT ExtraLarge([in] UINT32 value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveSpacingConfig
        {
            [default] interface IAdaptiveSpacingConfig;
        };

        [
            uuid(c34a155d-6913-4f8b-9b94-f4ab8c578aee),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveSeparatorThicknessConfig)
        ]
        interface IAdaptiveSeparatorThicknessConfig : IInspectable
        {
            [propget] HRESULT Default([out, retval] UINT32 *value);
            [propput] HRESULT Default([in] UINT32 value);

            [propget] HRESULT Thick([out, retval] UINT32 *value);
            [propput] HRESULT Thick([in] UINT32 value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveSeparatorThicknessConfig
        {
            [default] interface IAdaptiveSeparatorThicknessConfig;
        };

        [
            uuid(91ae6876-898b-4f34-a546-f9066867842e),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveSeparatorColorConfig)
        ]
        interface IAdaptiveSeparatorColorConfig : IInspectable
        {
            [propget] HRESULT Default([out][retval] Windows.UI.Color* value);
            [propput] HRESULT Default([in] Windows.UI.Color value);

            [propget] HRESULT Accent([out][retval] Windows.UI.Color* value);
            [propput] HRESULT Accent([in] Windows.UI.Color value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveSeparatorColorConfig
        {
            [default] interface IAdaptiveSeparatorColorConfig;
        };

        [
            uuid(ce5cd318-502c-4017-a076-4f8cdbb0316d),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveImageSizesConfig)
        ]
        interface IAdaptiveImageSizesConfig : IInspectable
        {
            [propget] HRESULT Small([out, retval] UINT32 *value);
            [propput] HRESULT Small([in] UINT32 value);

            [propget] HRESULT Medium([out, retval] UINT32 *value);
            [propput] HRESULT Medium([in] UINT32 value);

            [propget] HRESULT Large([out, retval] UINT32 *value);
            [propput] HRESULT Large([in] UINT32 value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveImageSizesConfig
        {
            [default] interface IAdaptiveImageSizesConfig;
        };
                
        [
            uuid(29685cc3-027f-4da8-9659-6d3a53c34d88),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveImageSetConfig)
        ]
        interface IAdaptiveImageSetConfig : IInspectable
        {
            [propget] HRESULT ImageSize([out, retval] ImageSize* value);
            [propput] HRESULT ImageSize([in] ImageSize value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveImageSetConfig
        {
            [default] interface IAdaptiveImageSetConfig;
        };

        [
            uuid(51b57d16-6155-4bbe-bf1a-516382ac9e81),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveContainerStyleConfig)
        ]
        interface IAdaptiveContainerStyleConfig : IInspectable
        {
            [propget] HRESULT BackgroundColor([out][retval] Windows.UI.Color* value);
            [propput] HRESULT BackgroundColor([in] Windows.UI.Color value);

            [propget] HRESULT BorderColor([out][retval] Windows.UI.Color* value);
            [propput] HRESULT BorderColor([in] Windows.UI.Color value);

            [propget] HRESULT Padding([out, retval] AdaptiveSpacingDefinition** value);
            [propput] HRESULT Padding([in] AdaptiveSpacingDefinition* value);

            [propget] HRESULT BorderThickness([out, retval] AdaptiveSpacingDefinition** value);
            [propput] HRESULT BorderThickness([in] AdaptiveSpacingDefinition* value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveContainerStyleConfig
        {
            [default] interface IAdaptiveContainerStyleConfig;
        };

        [
            uuid(740419b1-29de-435d-b8da-e34f1bd5afee),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveContainerConfig)
        ]
        interface IAdaptiveContainerConfig : IInspectable
        {
            [propget] HRESULT Normal([out, retval] AdaptiveContainerStyleConfig** value);
            [propput] HRESULT Normal([in] AdaptiveContainerStyleConfig* value);

            [propget] HRESULT Emphasis([out, retval] AdaptiveContainerStyleConfig** value);
            [propput] HRESULT Emphasis([in] AdaptiveContainerStyleConfig* value);

        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveContainerConfig
        {
            [default] interface IAdaptiveContainerConfig;
        };

        [
            uuid(9363ea9c-9f73-4e7d-8d6e-0559ac52b314),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveCardConfig)
        ]
        interface IAdaptiveCardConfig : IInspectable
        {
            [propget] HRESULT Padding([out, retval] AdaptiveSpacingDefinition** value);
            [propput] HRESULT Padding([in] AdaptiveSpacingDefinition* value);

            [propget] HRESULT BackgroundColor([out][retval] Windows.UI.Color* value);
            [propput] HRESULT BackgroundColor([in] Windows.UI.Color value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveCardConfig
        {
            [default] interface IAdaptiveCardConfig;
        };

        [
            uuid(9949ed60-fbc0-49fd-80d4-29fb1184854d),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveFactSetConfig)
        ]
        interface IAdaptiveFactSetConfig : IInspectable
        {
            [propget] HRESULT Title([out, retval] AdaptiveTextConfig** value);
            [propput] HRESULT Title([in] AdaptiveTextConfig* value);

            [propget] HRESULT Value([out, retval] AdaptiveTextConfig** value);
            [propput] HRESULT Value([in] AdaptiveTextConfig* value);

            [propget] HRESULT Spacing([out][retval] UINT32* value);
            [propput] HRESULT Spacing([in] UINT32 value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveFactSetConfig
        {
            [default] interface IAdaptiveFactSetConfig;
        };

        [
            uuid(eacabf24-288c-4307-bd5a-5888a00da918),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveShowCardActionConfig)
        ]
        interface IAdaptiveShowCardActionConfig : IInspectable
        {
            [propget] HRESULT ActionMode([out, retval] ActionMode *value);
            [propput] HRESULT ActionMode([in] ActionMode value);

            [propget] HRESULT BackgroundColor([out][retval] Windows.UI.Color* value);
            [propput] HRESULT BackgroundColor([in] Windows.UI.Color value);

            [propget] HRESULT Padding([out, retval] AdaptiveSpacingDefinition** value);
            [propput] HRESULT Padding([in] AdaptiveSpacingDefinition* value);

            [propget] HRESULT InlineTopMargin([out, retval] UINT32 *value);
            [propput] HRESULT InlineTopMargin([in] UINT32 value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveShowCardActionConfig
        {
            [default] interface IAdaptiveShowCardActionConfig;
        };

        [
            uuid(c01e7195-0c83-4fed-9911-3845bdb8ebc6),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveActionsConfig)
        ]
        interface IAdaptiveActionsConfig : IInspectable
        {
            [propget] HRESULT ShowCard([out, retval] AdaptiveShowCardActionConfig** value);
            [propput] HRESULT ShowCard([in] AdaptiveShowCardActionConfig* value);

            [propget] HRESULT ActionsOrientation([out][retval] ActionsOrientation* value);
            [propput] HRESULT ActionsOrientation([in] ActionsOrientation value);

            [propget] HRESULT ActionAlignment([out, retval] ActionAlignment* value);
            [propput] HRESULT ActionAlignment([in] ActionAlignment value);

            [propget] HRESULT ButtonSpacing([out][retval] UINT32* value);
            [propput] HRESULT ButtonSpacing([in] UINT32 value);

            [propget] HRESULT MaxActions([out][retval] UINT32* value);
            [propput] HRESULT MaxActions([in] UINT32 value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveActionsConfig
        {
            [default] interface IAdaptiveActionsConfig;
        };

        [
            uuid(85ef9ddc-4599-4ab6-adf1-1e04238601a5),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveHostConfig)
        ]
        interface IAdaptiveHostConfig : IInspectable
        {
            [propget] HRESULT FontFamily([out, retval] HSTRING* value);
            [propput] HRESULT FontFamily([in] HSTRING value);

            [propget] HRESULT FontSizes([out, retval] AdaptiveFontSizesConfig** value);
            [propput] HRESULT FontSizes([in] AdaptiveFontSizesConfig* value);

            [propget] HRESULT SupportsInteractivity([out, retval] boolean* value);
            [propput] HRESULT SupportsInteractivity([in] boolean value);

            [propget] HRESULT Colors([out, retval] AdaptiveColorsConfig** value);
            [propput] HRESULT Colors([in] AdaptiveColorsConfig* value);

            [propget] HRESULT ImageSizes([out, retval] AdaptiveImageSizesConfig** value);
            [propput] HRESULT ImageSizes([in] AdaptiveImageSizesConfig* value);

            [propget] HRESULT MaxActions([out, retval] UINT32 *value);
            [propput] HRESULT MaxActions([in] UINT32 value);

            [propget] HRESULT Spacing([out, retval] AdaptiveSpacingConfig** value);
            [propput] HRESULT Spacing([in] AdaptiveSpacingConfig* value);

            [propget] HRESULT SeparatorThickness([out, retval] AdaptiveSeparatorThicknessConfig** value);
            [propput] HRESULT SeparatorThickness([in] AdaptiveSeparatorThicknessConfig* value);

            [propget] HRESULT SeparatorColor([out, retval] AdaptiveSeparatorColorConfig** value);
            [propput] HRESULT SeparatorColor([in] AdaptiveSeparatorColorConfig* value);

            [propget] HRESULT AdaptiveCard([out, retval] AdaptiveCardConfig** value);
            [propput] HRESULT AdaptiveCard([in] AdaptiveCardConfig* value);

            [propget] HRESULT ImageSet([out, retval] AdaptiveImageSetConfig** value);
            [propput] HRESULT ImageSet([in] AdaptiveImageSetConfig* value);

            [propget] HRESULT FactSet([out, retval] AdaptiveFactSetConfig** value);
            [propput] HRESULT FactSet([in] AdaptiveFactSetConfig* value);

            [propget] HRESULT Container([out, retval] AdaptiveContainerConfig** value);
            [propput] HRESULT Container([in] AdaptiveContainerConfig* value);

            [propget] HRESULT Actions([out, retval] AdaptiveActionsConfig** value);
            [propput] HRESULT Actions([in] AdaptiveActionsConfig* value);
        };

        [
            uuid(b90caf09-4257-4b00-a9d0-8c3cc4f8b76e),
            version(NTDDI_WIN10_RS1),
            exclusiveto(AdaptiveHostConfig),
        ]
        interface IAdaptiveHostConfigStatics : IInspectable
        {
            HRESULT CreateHostConfigFromJson([in] HSTRING hostConfigJson, [out, retval] AdaptiveHostConfig** config);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1),
            static(IAdaptiveHostConfigStatics, NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveHostConfig
        {
            [default] interface IAdaptiveHostConfig;
        };

        [
            uuid(f0076852-de82-4cc6-8cb3-26cf6ab3c196),
            version(NTDDI_WIN10_RS1),
        ]
        interface IAdaptiveActionElement : IInspectable
        {
            [propget] HRESULT ActionType([out, retval] ActionType* value);

            [propget] HRESULT Title([out, retval] HSTRING* value);
            [propput] HRESULT Title([in] HSTRING value);

            [propget] HRESULT Speak([out, retval] HSTRING* value);
            [propput] HRESULT Speak([in] HSTRING value);
        };

        [
            uuid(3d2b3b79-af79-46c5-9657-d862f2dee109),
            version(NTDDI_WIN10_RS1),
        ]
        interface IAdaptiveHttpAction : IInspectable
        {
            [propput] HRESULT Url([in] Windows.Foundation.Uri* value);
            [propget] HRESULT Url([out, retval] Windows.Foundation.Uri** value);

            [propget] HRESULT Method([out, retval] HSTRING* value);
            [propput] HRESULT Method([in] HSTRING value);

            [propget] HRESULT Body([out, retval] HSTRING* value);
            [propput] HRESULT Body([in] HSTRING value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveHttpAction
        {
            [default] interface IAdaptiveHttpAction;
            interface IAdaptiveActionElement;
        };

        [
            uuid(d70a58cb-4d51-4f96-bb6b-2698eced32ff),
            version(NTDDI_WIN10_RS1),
        ]
        interface IAdaptiveOpenUrlAction : IInspectable
        {
            [propput] HRESULT Url([in] Windows.Foundation.Uri* value);
            [propget] HRESULT Url([out, retval] Windows.Foundation.Uri** value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveOpenUrlAction
        {
            [default] interface IAdaptiveOpenUrlAction;
            interface IAdaptiveActionElement;
        };

        [
            uuid(435ea974-33c7-43b0-a6ac-8137c1b7bb44),
            version(NTDDI_WIN10_RS1),
        ]
        interface IAdaptiveShowCardAction : IInspectable
        {
            [propget] HRESULT Card([out, retval] AdaptiveCard** value);
            [propput] HRESULT Card([in] AdaptiveCard* value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveShowCardAction
        {
            [default] interface IAdaptiveShowCardAction;
            interface IAdaptiveActionElement;
        };

        [
            uuid(97b9b3a3-657b-4d38-a136-154cc8da19a9),
            version(NTDDI_WIN10_RS1),
        ]
        interface IAdaptiveSubmitAction : IInspectable
        {
            [propget] HRESULT DataJson([out, retval] HSTRING* value);
            [propput] HRESULT DataJson([in] HSTRING value);
        };

        [
            version(NTDDI_WIN10_RS1),
            activatable(NTDDI_WIN10_RS1)
        ]
        runtimeclass AdaptiveSubmitAction
        {
            [default] interface IAdaptiveSubmitAction;
            interface IAdaptiveActionElement;
        };
    }
}